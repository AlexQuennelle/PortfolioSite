#version 330

in vec3 fragPosition;
in vec2 fragTexCoord;
in vec4 fragColor;
in vec3 fragNormal;

uniform sampler2D texture0;
uniform vec4 colDiffuse;
float ambient = 0.2f;
vec3 lightPos = vec3(-40, 50, 60);

out vec4 finalColor;

void main()
{
    vec3 dir = normalize(lightPos - fragPosition);
    float diffuse = max(dot(fragNormal, dir), ambient);
    finalColor = vec4(vec3(0.9f,0.9f,0.9f) * diffuse, 1.0f);
    //finalColor = vec4(fragColor.xyz * diffuse, 1.0f);
    //finalColor = vec4(1.0f, 1.0f, 1.0f, 10.0f / 255); //overdraw visualization
}
#version 330

in vec3 vertexPosition;
in vec2 vertexTexCoord;
in vec3 vertexNormal;
in vec4 vertexColor;

uniform mat4 mvp;
uniform mat4 matModel;
uniform mat4 matNormal;

out vec3 fragPosition;
out vec2 fragTexCoord;
out vec4 fragColor;
out vec3 fragNormal;

void main()
{
    fragPosition = vec3(matModel * vec4(vertexPosition, 1.0f));
    fragTexCoord = vertexTexCoord;
    fragColor = vertexColor;
    fragNormal = normalize(vec3(matNormal * vec4(vertexNormal, 1.0f)));

    gl_Position = mvp * vec4(vertexPosition, 1.0f);
}
#version 100

precision mediump float;

varying vec3 fragPosition;
varying vec2 fragTexCoord;
varying vec3 fragNormal;

uniform vec4 col;

float ambient = 0.2;
vec3 lightPos = vec3(40, 50, -60);

uniform sampler2D texture0;
uniform vec4 colDiffuse;

void main()
{
    vec3 dir = normalize(lightPos - fragPosition);
    float diffuse = max(dot(fragNormal, dir), ambient);
    //gl_FragColor = vec4(col.xyz * diffuse, 1.0);
    //gl_FragColor = vec4(1.0,1.0,0.0,1.0);
    gl_FragColor = vec4(vec3(0.9,0.9,0.9) * diffuse, 1.0);
}
#version 100

attribute vec3 vertexPosition;
attribute vec2 vertexTexCoord;
attribute vec3 vertexNormal;

uniform mat4 mvp;
uniform mat4 matModel;
uniform mat4 matNormal;

varying vec3 fragPosition;
varying vec2 fragTexCoord;
varying vec3 fragNormal;

void main()
{
    fragPosition = vec3(matModel * vec4(vertexPosition, 1.0));
    fragTexCoord = vertexTexCoord;
    fragNormal = normalize(vec3(matNormal * vec4(vertexNormal, 1.0)));

    gl_Position = mvp * vec4(vertexPosition, 1.0);
}
# Blender 4.5.1 LTS
# www.blender.org
o Cube
v -0.500000 0.500000 0.500000
v -0.500000 -0.500000 0.500000
v -0.500000 0.000000 0.000000
v -0.500000 -0.500000 -0.500000
v 0.500000 0.500000 0.500000
v 0.500000 -0.500000 0.500000
v 0.500000 0.000000 -0.000000
v 0.500000 -0.500000 -0.500000
v -0.500000 0.500000 0.000000
v 0.500000 0.500000 -0.000000
v 0.500000 0.000000 -0.500000
v -0.500000 0.000000 -0.500000
vn -0.0000 -0.0000 -1.0000
vn -0.0000 1.0000 -0.0000
vn 1.0000 -0.0000 -0.0000
vn -1.0000 -0.0000 -0.0000
vn -0.0000 -1.0000 -0.0000
vn -0.0000 -0.0000 1.0000
vt 0.875000 0.625000
vt 0.625000 0.750000
vt 0.625000 0.625000
vt 0.500000 1.000000
vt 0.500000 0.750000
vt 0.500000 0.125000
vt 0.625000 0.125000
vt 0.500000 0.250000
vt 0.625000 0.500000
vt 0.500000 0.625000
vt 0.375000 0.500000
vt 0.125000 0.625000
vt 0.125000 0.500000
vt 0.875000 0.500000
vt 0.375000 0.000000
vt 0.500000 0.000000
vt 0.375000 0.625000
vt 0.375000 0.250000
vt 0.375000 0.125000
vt 0.375000 1.000000
vt 0.375000 0.750000
vt 0.875000 0.750000
vt 0.625000 1.000000
vt 0.500000 0.500000
s 0
f 10/1/1 3/2/1 9/3/1
f 3/2/2 11/4/2 12/5/2
f 7/6/3 10/7/3 5/8/3
f 1/9/4 9/3/4 3/10/4
f 2/11/5 8/12/5 6/13/5
f 5/14/2 9/3/2 1/9/2
f 8/15/3 11/16/3 7/6/3
f 2/11/4 3/10/4 4/17/4
f 5/8/6 2/11/6 6/18/6
f 4/17/4 3/10/4 12/5/4
f 7/6/3 6/18/3 8/19/3
f 12/5/1 8/20/1 4/21/1
f 10/1/1 7/22/1 3/2/1
f 3/2/2 7/23/2 11/4/2
f 2/11/5 4/17/5 8/12/5
f 5/14/2 10/1/2 9/3/2
f 2/11/4 1/24/4 3/10/4
f 5/8/6 1/24/6 2/11/6
f 7/6/3 5/8/3 6/18/3
f 12/5/1 11/4/1 8/20/1
